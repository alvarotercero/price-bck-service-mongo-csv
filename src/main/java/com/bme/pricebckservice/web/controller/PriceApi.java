/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bme.pricebckservice.web.controller;

import com.bme.pricebckservice.utils.ApiUtil;
import com.bme.pricebckservice.domain.model.Price;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-24T17:05:00.970072+02:00[Europe/Paris]")

@Validated
@Api(value = "price", description = "the price API")
public interface PriceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /price/add : Add a new price to the db
     * Add a new price to the db
     *
     * @param price Create a new price in db (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @ApiOperation(value = "Add a new price to the db", nickname = "addPrice", notes = "Add a new price to the db", response = Price.class, tags={ "price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Price.class),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 422, message = "Validation exception") })
    @RequestMapping(value = "/price/add",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Price> addPrice(@ApiParam(value = "Create a new price in db" ,required=true )  @Valid @RequestBody Price price) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"idContract\" : 10, \"id\" : 10, \"value\" : 400.5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Contract> <id>10</id> <value>400.5</value> <idContract>10</idContract> </Contract>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /price/delete/{id} : Deletes a price
     * delete a price
     *
     * @param id price id to delete (required)
     * @return Successful operation (status code 200)
     *         or Invalid id (status code 400)
     *         or Validation exception (status code 422)
     */
    @ApiOperation(value = "Deletes a price", nickname = "deletePrice", notes = "delete a price", tags={ "price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid id"),
        @ApiResponse(code = 422, message = "Validation exception") })
    @RequestMapping(value = "/price/delete/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePrice(@ApiParam(value = "price id to delete",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /price/all : Find all price
     * Returns all price
     *
     * @return successful operation (status code 200)
     *         or Invalid operation (status code 400)
     *         or Contract not found (status code 404)
     */
    @ApiOperation(value = "Find all price", nickname = "getPrices", notes = "Returns all price", response = Price.class, responseContainer = "List", tags={ "price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Price.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid operation"),
        @ApiResponse(code = 404, message = "Contract not found") })
    @RequestMapping(value = "/price/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Price>> getPrices() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /price/getByContracts : Find prices by contracts
     * Returns prices
     *
     * @param idContract idContract to return prices (required)
     * @return successful operation (status code 200)
     *         or Invalid operation (status code 400)
     *         or Price not found (status code 404)
     */
    @ApiOperation(value = "Find prices by contracts", nickname = "getPricesByContracts", notes = "Returns prices", response = Price.class, responseContainer = "List", tags={ "price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Price.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid operation"),
        @ApiResponse(code = 404, message = "Price not found") })
    @RequestMapping(value = "/price/getByContracts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Price>> getPricesByContracts(@ApiParam(value = "idContract to return prices" ,required=true) @RequestHeader(value="idContract", required=true) Long idContract) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /price/update : Update an existing price
     * Update an existing price by Id
     *
     * @param price Update an existent price (required)
     * @return Successful operation (status code 200)
     *         or Invalid data (status code 400)
     *         or Price not found (status code 404)
     *         or Validation exception (status code 422)
     */
    @ApiOperation(value = "Update an existing price", nickname = "updatePrice", notes = "Update an existing price by Id", response = Price.class, tags={ "price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Price.class),
        @ApiResponse(code = 400, message = "Invalid data"),
        @ApiResponse(code = 404, message = "Price not found"),
        @ApiResponse(code = 422, message = "Validation exception") })
    @RequestMapping(value = "/price/update",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    default ResponseEntity<Price> updatePrice(@ApiParam(value = "Update an existent price" ,required=true )  @Valid @RequestBody Price price) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"idContract\" : 10, \"id\" : 10, \"value\" : 400.5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Contract> <id>10</id> <value>400.5</value> <idContract>10</idContract> </Contract>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * POST /contract/csv : Add a new contract to the database via csv file
     * Add a new contract to the db
     *
     * @param CSV Create a new contract in db (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @ApiOperation(value = "Add a new price to the db using csv file", nickname = "addPriceCsv", notes = "Add a new price to the db using csv file", response = Price.class, tags={ "price", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Price.class),
            @ApiResponse(code = 400, message = "Invalid input"),
            @ApiResponse(code = 422, message = "Validation exception") })
    @RequestMapping(value = "/price/csv",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded", "multipart/form-data" },
            method = RequestMethod.POST)
    default ResponseEntity<Price> addPriceCSV(@ApiParam(value = "Create a new price in db using csv file" ,required=true )  @Valid @RequestParam MultipartFile file) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2024-04-09T00:00:00.000+0000\", \"idPrice\" : 10, \"name\" : \"BME\", \"id\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Price> <id>10</id> <name>BME</name> <date>Tue Apr 09 02:00:00 CEST 2024</date> <idPrice>10</idPrice> </Price>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


}
